package uparis.diamanthamdi.backend.algo;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import uparis.diamanthamdi.backend.model.cell.type.Cell;
import uparis.diamanthamdi.backend.model.grid.Grid;

/**
 * Class to generate a graph from a grid.
 * 
 * The graph is generated by creating a node for each cell in the grid and connecting each node to its neighbors.
 */
public class GraphGenerator {
    /** The grid to generate the graph from. */
    private Grid grid;

    /**
     * Creates a new graph generator with the given grid.
     *
     * @param grid The grid to generate the graph from.
     */
    public GraphGenerator(final Grid grid) {
        this.grid = grid;
    }

    /**
     * Generates the graph.
     *
     * @return The generated graph.
     */
    public Graph<Cell> generate() {
        Set<Cell> nodes = new HashSet<>();
        Map<String, Set<String>> connections = new HashMap<>();

        Cell[][] cells = grid.getCells();

        for (int i = 0; i < grid.getWidth(); i++) {
            for (int j = 0; j < grid.getHeight(); j++) {
                Cell cell = cells[i][j];
                nodes.add(cell);

                Set<String> connectedNodes = getConnectedNodes(cells, i, j);

                connections.put(cell.getId(), connectedNodes);
            }
        }

        return new Graph<>(nodes, connections);
    }

    /**
     * Gets the connected nodes of the cell at the given position.
     *
     * @param cells The cells of the grid.
     * @param i The x-coordinate of the cell.
     * @param j The y-coordinate of the cell.
     * @return The connected nodes of the cell.
     */
    private Set<String> getConnectedNodes(Cell[][] cells, int i, int j) {
        Set<String> connectedNodes = new HashSet<>();
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                int ni = i + dx;
                int nj = j + dy;
                if (ni >= 0 && ni < grid.getWidth() 
                && nj >= 0 && nj < grid.getHeight() 
                && !(dx == 0 && dy == 0)) {
                    connectedNodes.add(cells[ni][nj].getId());
                }
            }
        }
        return connectedNodes;
    }
}
